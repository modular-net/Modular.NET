name: Build & Analyze

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # GitTools calculate version
  versioning:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install GitTools
        uses: gittools/actions/gitversion/setup@v0.9.9
        with:
          versionSpec: '5.x'
        
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.9
        
  # Build, Test and SonarCloud Analyze
  build:
    name: Build, Test and SonarCloud Analyze
    runs-on: ubuntu-latest
    needs: versioning

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
      
    - name: Set up .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: ./.sonar/scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p ./.sonar/scanner
        dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build, Test and SonarCloud
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        ./.sonar/scanner/dotnet-sonarscanner begin /k:"modular-net_Modular.NET" /o:"modular" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /v:"${{ needs.versioning.outputs.semVer }}"
        dotnet build --no-restore
        dotnet test --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
        ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      
      
      
      
      
