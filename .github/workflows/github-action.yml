name: Build & Analyze

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # GitTools calculate version
  versioning:
    name: Calculate Version
    runs-on: ubuntu-latest
    
    outputs:
      semVer: ${{ steps.gitversion.outputs.semVer }}
      
    steps:
      - name: Install GitTools
        uses: gittools/actions/gitversion/setup@v0.9.9
        
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0.9.9

      - name: Display GitVersion outputs
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "PreReleaseTag: ${{ steps.gitversion.outputs.preReleaseTag }}"
          echo "PreReleaseTagWithDash: ${{ steps.gitversion.outputs.preReleaseTagWithDash }}"
          echo "PreReleaseLabel: ${{ steps.gitversion.outputs.preReleaseLabel }}"
          echo "PreReleaseNumber: ${{ steps.gitversion.outputs.preReleaseNumber }}"
          echo "WeightedPreReleaseNumber: ${{ steps.gitversion.outputs.weightedPreReleaseNumber }}"
          echo "BuildMetaData: ${{ steps.gitversion.outputs.buildMetaData }}"
          echo "BuildMetaDataPadded: ${{ steps.gitversion.outputs.buildMetaDataPadded }}"
          echo "FullBuildMetaData: ${{ steps.gitversion.outputs.fullBuildMetaData }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "LegacySemVer: ${{ steps.gitversion.outputs.legacySemVer }}"
          echo "LegacySemVerPadded: ${{ steps.gitversion.outputs.legacySemVerPadded }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"
          echo "AssemblySemFileVer: ${{ steps.gitversion.outputs.assemblySemFileVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "InformationalVersion: ${{ steps.gitversion.outputs.informationalVersion }}"
          echo "BranchName: ${{ steps.gitversion.outputs.branchName }}"
          echo "EscapedBranchName: ${{ steps.gitversion.outputs.escapedBranchName }}"
          echo "Sha: ${{ steps.gitversion.outputs.sha }}"
          echo "ShortSha: ${{ steps.gitversion.outputs.shortSha }}"
          echo "NuGetVersionV2: ${{ steps.gitversion.outputs.nuGetVersionV2 }}"
          echo "NuGetVersion: ${{ steps.gitversion.outputs.nuGetVersion }}"
          echo "NuGetPreReleaseTagV2: ${{ steps.gitversion.outputs.nuGetPreReleaseTagV2 }}"
          echo "NuGetPreReleaseTag: ${{ steps.gitversion.outputs.nuGetPreReleaseTag }}"
          echo "VersionSourceSha: ${{ steps.gitversion.outputs.versionSourceSha }}"
          echo "CommitsSinceVersionSource: ${{ steps.gitversion.outputs.commitsSinceVersionSource }}"
          echo "CommitsSinceVersionSourcePadded: ${{ steps.gitversion.outputs.commitsSinceVersionSourcePadded }}"
          echo "UncommittedChanges: ${{ steps.gitversion.outputs.uncommittedChanges }}"
          echo "CommitDate: ${{ steps.gitversion.outputs.commitDate }}"
    
  # GitHub CodeQL analyze
#   analyze:
#     name: CodeQL Analyze
#     runs-on: ubuntu-latest

#     strategy:
#       fail-fast: false
#       matrix:
#         language: ['csharp']

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2

#     - name: Initialize CodeQL
#       uses: github/codeql-action/init@v1
#       with:
#         languages: ${{ matrix.language }}
      
#     - name: Autobuild
#       uses: github/codeql-action/autobuild@v1
      
#     - name: Perform CodeQL Analysis
#       uses: github/codeql-action/analyze@v1

  # Build, Test and SonarCloud Analyze
#   build:
#     name: Build, Test and SonarCloud Analyze
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout repository
#       uses: actions/checkout@v2
#       with:
#         fetch-depth: 0
        
#     - name: Set up JDK 11
#       uses: actions/setup-java@v1
#       with:
#         java-version: 1.11
      
#     - name: Set up .NET
#       uses: actions/setup-dotnet@v1
#       with:
#         dotnet-version: 3.1.x
    
#     - name: Cache SonarCloud packages
#       uses: actions/cache@v1
#       with:
#         path: ~/sonar/cache
#         key: ${{ runner.os }}-sonar
#         restore-keys: ${{ runner.os }}-sonar
    
#     - name: Cache SonarCloud scanner
#       id: cache-sonar-scanner
#       uses: actions/cache@v1
#       with:
#         path: ./.sonar/scanner
#         key: ${{ runner.os }}-sonar-scanner
#         restore-keys: ${{ runner.os }}-sonar-scanner
    
#     - name: Install SonarCloud scanner
#       if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#       shell: bash
#       run: |
#         mkdir -p ./.sonar/scanner
#         dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
        
#     - name: Restore dependencies
#       run: dotnet restore
      
#     - name: Build, Test and SonarCloud
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       run: |
#         ./.sonar/scanner/dotnet-sonarscanner begin /k:"modular-net_Modular.NET" /o:"modular" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
#         dotnet build --no-restore
#         dotnet test --no-build --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
#         ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      
      
      
      
      
