name: Build & Analyze

on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # GitHub CodeQL analyze
  analyze:
    name: CodeQL Analyze
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['csharp']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
      
    - name: Autobuild
      uses: github/codeql-action/autobuild@v1
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
  
  # SonarCloud
#   sonarcloud:
#     name: SolnarCloud Analyze
#     runs-on: ubuntu-latest
    
#     steps:
#     - uses: actions/checkout@v2
#       with:
#         fetch-depth: 0
        
#     - name: SonarCloud Scan
#       uses: sonarsource/sonarcloud-github-action@master
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#       with:
#         args: >
#           -Dsonar.organization=modular
#           -Dsonar.projectKey=modular-net_Modular.NET
#           -X
  
  # dotnet build
  build:
    name: Build, Test and SonarCloud Analyze
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 1.11
      
    - name: Set up .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p .\.sonar\scanner
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
        cd .\.sonar\scanner
        ls
        
    - name: Restore dependencies
      run: dotnet restore
      
#     - name: Build
#       run: dotnet build --no-restore
      
#     - name: Test
#       run: dotnet test --no-build --verbosity normal

    - name: Build and Test
      run: |
        dotnet sonarscanner begin /k:"modular-net_Modular.NET" /o:"modular" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build --no-restore
        dotnet test --no-build --verbosity normal
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      
      
      
      
      
